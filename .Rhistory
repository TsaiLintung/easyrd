print(rd_result)
class(rd_result)
load_all()
x <- runif(1000, -1, 1)
x1 <- runif(1000, -1, 1)
y <- 5+3*x+x1+2*(x>=0)+rnorm(1000)
y2 <- 5+3*x+x1+3*(x>=0)+rnorm(1000)
dt <- data.table(x = x, y = y, x1 = x1, y2 = y2)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
rd_result <- easyrd(dt, p)
class(rd_result)
rd_result
load_all()
class(rd_result)
x <- runif(1000, -1, 1)
x1 <- runif(1000, -1, 1)
y <- 5+3*x+x1+2*(x>=0)+rnorm(1000)
y2 <- 5+3*x+x1+3*(x>=0)+rnorm(1000)
dt <- data.table(x = x, y = y, x1 = x1, y2 = y2)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
rd_result <- easyrd(dt, p)
rd_result
plot(rd_result)
?rdrobust
get_param <- function(outcomes, running, cutoff,
donut = -1, bandwidth = NULL, donut = NULL
est = "robust", est_param = list(vce = "hc1"), plot_param = NULL){
get_param <- function(outcomes, running, cutoff,
donut = -1, bandwidth = NULL, donut = NULL,
est = "robust", est_param = list(vce = "hc1"), plot_param = NULL){
p <- as.list(environment())
class(p) <- "easyrd_param"
return(p)
}
get_param <- function(outcomes, running, cutoff,
donut = -1, bandwidth = NULL,
est = "robust", est_param = list(vce = "hc1"), plot_param = NULL){
p <- as.list(environment())
class(p) <- "easyrd_param"
return(p)
}
get_param("c", "s", 0)
#' @param outcomes A character vector specifying the outcome variables for the RD analysis.
#' @param running A string indicating the running variable used in the RD analysis.
#' @param cutoff A numeric value specifying the cutoff point for the running variable in the RD analysis.
#' @param bandwidth A numeric value specifying the bandwidth for data used, default is "NULL"
#' @param donut A numeric value specifying the size of the donut hole, default is -1
#' @param est A string indicating the estimator to be used. Default is "robust".
#' @param est_param A list of parameters to be passed to rdrobust, default is list(vce = "hc1")
#' @param plot_param A list of parameters to be passed to rdplot, default is NULL
?rdrobust
rdrobust
?suppressWarnings
?rdrobust
roxygenise()
load_all()
roxygenise()
roxygenise()
load_all()
x <- runif(1000, -1, 1)
x1 <- runif(1000, -1, 1)
y <- 5+3*x+x1+2*(x>=0)+rnorm(1000)
y2 <- 5+3*x+x1+3*(x>=0)+rnorm(1000)
dt <- data.table(x = x, y = y, x1 = x1, y2 = y2)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
rd_result <- easyrd(dt, p)
p
load_all()
x <- runif(1000, -1, 1)
x1 <- runif(1000, -1, 1)
y <- 5+3*x+x1+2*(x>=0)+rnorm(1000)
y2 <- 5+3*x+x1+3*(x>=0)+rnorm(1000)
dt <- data.table(x = x, y = y, x1 = x1, y2 = y2)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
rd_result <- easyrd(dt, p)
?do.call
load_all()
x <- runif(1000, -1, 1)
x1 <- runif(1000, -1, 1)
y <- 5+3*x+x1+2*(x>=0)+rnorm(1000)
y2 <- 5+3*x+x1+3*(x>=0)+rnorm(1000)
dt <- data.table(x = x, y = y, x1 = x1, y2 = y2)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
rd_result <- easyrd(dt, p)
load_all()
x <- runif(1000, -1, 1)
x1 <- runif(1000, -1, 1)
y <- 5+3*x+x1+2*(x>=0)+rnorm(1000)
y2 <- 5+3*x+x1+3*(x>=0)+rnorm(1000)
dt <- data.table(x = x, y = y, x1 = x1, y2 = y2)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
rd_result <- easyrd(dt, p)
p$est_param
p
?rdrobust
x <- runif(1000, -1, 1)
x1 <- runif(1000, -1, 1)
y <- 5+3*x+x1+2*(x>=0)+rnorm(1000)
y2 <- 5+3*x+x1+3*(x>=0)+rnorm(1000)
dt <- data.table(x = x, y = y, x1 = x1, y2 = y2)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
rd_result <- easyrd(dt, p)
traceback()
p
?rdplot
?rdbwselect
?rdrobust
?rdbwselect
load_all()
x <- runif(1000, -1, 1)
x1 <- runif(1000, -1, 1)
y <- 5+3*x+x1+2*(x>=0)+rnorm(1000)
y2 <- 5+3*x+x1+3*(x>=0)+rnorm(1000)
dt <- data.table(x = x, y = y, x1 = x1, y2 = y2)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
rd_result <- easyrd(dt, p)
rd_result
plot(rd_result)
?rdplot
load_all()
plot(rd_result)
x <- runif(1000, -1, 1)
x1 <- runif(1000, -1, 1)
y <- 5+3*x+x1+2*(x>=0)+rnorm(1000)
y2 <- 5+3*x+x1+3*(x>=0)+rnorm(1000)
dt <- data.table(x = x, y = y, x1 = x1, y2 = y2)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
rd_result <- easyrd(dt, p)
plot(rd_result)
?rdplot
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, q = p+1, bins = c(20, 20)))
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, q = 2, bins = c(20, 20)))
rd_result <- easyrd(dt, p)
p
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
p
load_all()
p <- get_param()
x <- runif(1000, -1, 1)
x1 <- runif(1000, -1, 1)
y <- 5+3*x+x1+2*(x>=0)+rnorm(1000)
y2 <- 5+3*x+x1+3*(x>=0)+rnorm(1000)
dt <- data.table(x = x, y = y, x1 = x1, y2 = y2)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, q = 2, bins = c(20, 20)))
rd_result <- easyrd(dt, p)
traceback()
?rdplot
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, bins = c(20, 20)))
rd_result <- easyrd(dt, p)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, nbins = c(20, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 2, nbins = c(20, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 3, nbins = c(20, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, nbins = c(20, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
?rdplot
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 2, nbins = c(20, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 4, nbins = c(20, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, nbins = c(20, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, nbins = c(40, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, nbins = c(2, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, nbins = c(20, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
load_all()
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, nbins = c(20, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, nbins = c(5, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, nbins = c(20, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, nbins = c(20, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p
load_all()
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, nbins = c(20, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p
p
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, nbins = c(20, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0,
plot_param = list(kernel = "triangular", p = 1, nbins = c(10, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0, bin_bandidth_ratio = NULL,
plot_param = list(kernel = "triangular", p = 1, nbins = c(10, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0, bin_bandidth_ratio = 1.5,
plot_param = list(kernel = "triangular", p = 1, nbins = c(10, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
load_all()
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0, bin_bandidth_ratio = 1.5,
plot_param = list(kernel = "triangular", p = 2, nbins = c(10, 20)))
rd_result <- easyrd(dt, p)
load_all
load_all()
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0, bin_bandidth_ratio = 1.5,
plot_param = list(kernel = "triangular", p = 2, nbins = c(10, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0, bin_bandidth_ratio = 1.5,
plot_param = list(kernel = "triangular", p = 5, nbins = c(10, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
load_all()
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0, bin_bandidth_ratio = 1.5,
plot_param = list(kernel = "triangular", p = 5, nbins = c(10, 20)))
rd_result <- easyrd(dt, p)
plot(rd_result)
rd_result
rd_result$params
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0, bin_bandidth_ratio = 1.5,
plot_param = list(kernel = "triangular", p = 5, nbins = c(10, 20)))
rd_result <- easyrd(dt, p, alt_type = "cutoff", values = (-5:5)*0.1)
plot(rd_result)
rd_result
load_all()
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0, bin_bandidth_ratio = 1.5,
plot_param = list(kernel = "triangular", p = 5, nbins = c(10, 20)))
rd_result <- easyrd(dt, p, alt_type = "cutoff", values = (-5:5)*0.1)
plot(rd_result)
rd_result$estimate
load_all()
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0, bin_bandidth_ratio = 1.5,
plot_param = list(kernel = "triangular", p = 5, nbins = c(10, 20)))
rd_result <- easyrd(dt, p, alt_type = "cutoff", values = (-5:5)*0.1)
plot(rd_result)
rd_result
dt
rd_result$estimate
load_all()
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0, bin_bandidth_ratio = 1.5,
plot_param = list(kernel = "triangular", p = 5, nbins = c(10, 20)))
rd_result <- easyrd(dt, p, alt_type = "cutoff", values = (-5:5)*0.1)
plot(rd_result)
rd_result
load_all()
rd_result
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0, bin_bandidth_ratio = 1.5,
plot_param = list(kernel = "triangular", p = 5, nbins = c(10, 20)))
rd_result <- easyrd(dt, p, alt_type = "cutoff", values = (-5:5)*0.1)
plot(rd_result)
rd)result
rd_result
rd_result
load_all()
rd_result
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0, bin_bandidth_ratio = 1.5,
plot_param = list(kernel = "triangular", p = 5, nbins = c(10, 20)))
rd_result <- easyrd(dt, p, alt_type = "cutoff", values = (-5:5)*0.1)
plot(rd_result)
rd_result
rd_result
load_all()
# setup ---------------------------------------
x <- runif(1000, -1, 1)
x1 <- runif(1000, -1, 1)
y <- 5+3*x+x1+2*(x>=0)+rnorm(1000)
y2 <- 5+3*x+x1+3*(x>=0)+rnorm(1000)
dt <- data.table(x = x, y = y, x1 = x1, y2 = y2)
p <- get_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
# easyrd basic ------------------------------------------------------------
# Assuming you have some mock data 'dt' and parameters 'p' defined
# Test that easyrd returns correct types
results <- easyrd(dt, p)
# setup ---------------------------------------
x <- runif(1000, -1, 1)
x1 <- runif(1000, -1, 1)
y <- 5+3*x+x1+2*(x>=0)+rnorm(1000)
y2 <- 5+3*x+x1+3*(x>=0)+rnorm(1000)
dt <- data.table(x = x, y = y, x1 = x1, y2 = y2)
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
# easyrd basic ------------------------------------------------------------
# Assuming you have some mock data 'dt' and parameters 'p' defined
# Test that easyrd returns correct types
results <- easyrd(dt, p)
expect_equal(typeof(results), "list")
setwd("~/GitHub/easyrd")
setwd("~/Documents/GitHub/easyrd")
library(devtools)
library(tinytest)
library(roxygen2)
rm(list = ls())
roxygenise()
load_all()
run_test_dir()
# setup ---------------------------------------
x <- runif(1000, -1, 1)
x1 <- runif(1000, -1, 1)
y <- 5+3*x+x1+2*(x>=0)+rnorm(1000)
y2 <- 5+3*x+x1+3*(x>=0)+rnorm(1000)
dt <- data.table(x = x, y = y, x1 = x1, y2 = y2)
p <- get_rd_param(running = "x", outcomes = c("y", "y2"), cutoff = 0)
# easyrd basic ------------------------------------------------------------
# Assuming you have some mock data 'dt' and parameters 'p' defined
# Test that easyrd returns correct types
results <- easyrd(dt, p)
expect_equal(typeof(results), "list")
expect_true("estimate" %in% names(results))
expect_true("plot" %in% names(results))
# Test that easyrd handles alternative types correctly
results <- easyrd(dt, p, alt_type = "subsample", values = c("x1>0", "x1<=0"))
expect_equal(nrow(results$estimate), 4) #2 outcome * 2 specs
expect_equal(results$estimate$type, rep("subsample", nrow(results$estimate)))
expect_true(results$estimate[outcome == "y2" & value == "x1<=0", coef] != results$estimate[outcome == "y2" & value == "x1>0", coef])
# Test that easyrd handles alternative types correctly
results <- easyrd(dt, p, alt_type = "cutoff", values = c(-0.1, 0.1))
expect_equal(nrow(results$estimate), 4) #2 outcome * 2 specs
expect_equal(results$estimate$type, rep("cutoff", nrow(results$estimate)))
expect_true(results$estimate[outcome == "y2" & value == -0.1, coef] != results$estimate[outcome == "y2" & value == 0.1, coef])
# Test verbose flag
expect_message(easyrd(dt, p, verbose = TRUE))
# Test plot from source
results <- easyrd(dt, p, result_type = "plot_source")
expect_equal(class(plot_rd(results$plot_source[outcome == "y"])), c("gg", "ggplot"))
rm(results)
# plot ----------------------------------------
results <- easyrd(dt, p)
expect_equal(class(plot(results)), c("gg", "ggplot"))
expect_stdout(summary(results), "outcome")
alt_results <- easyrd(dt, p, alt_type = "cutoff", values = c(-0.1, 0.1))
expect_equal(class(plot(alt_results)), c("gg", "ggplot"))
expect_stdout(summary(alt_results), "outcome")
# summary --------------------------------------
load_all()
run_test_dir()
results <- easyrd(dt, p)
expect_equal(class(plot(results)), c("gg", "ggplot"))
expect_stdout(print(results), "outcome")
alt_results <- easyrd(dt, p, alt_type = "cutoff", values = c(-0.1, 0.1))
expect_equal(class(plot(alt_results)), c("gg", "ggplot"))
expect_stdout(print(alt_results), "outcome")
alt_results <- easyrd(dt, p, alt_type = "cutoff", values = c(-0.1, 0.1))
expect_equal(class(plot(alt_results)), c("gg", "ggplot"))
expect_stdout(print(alt_results), "Result")
load_all()
setwd("~/Documents/GitHub/easyrd")
library(devtools)
library(tinytest)
library(roxygen2)
rm(list = ls())
roxygenise()
load_all()
run_test_dir()
build()
check()
build()
check()
build()
check()
?is
?inherits
build()
check()
load_all()
x0 <- runif(1000, -1, 1)
x <- runif(1000, -1, 1)
x2 <- runif(1000, -1, 1)
y <- 5 + 3*x + x2 + 2*(x >= 0) + rnorm(1000)
y2 <- 5 + 3*x + x2 + 3*(x >= 0) + rnorm(1000)
dt <- data.table(x = x, x2 = x2, y = y, y2 = y2, x0 = x0)
# Set parameters for RD analysis
outcomes <- c("y", "y2")
running <- "x"
cutoff <- 0
params <- get_rd_param(outcomes, running, cutoff)
rd_result <- easyrd(dt, params)
cov_params <- params
cov_params$outcomes <- c("x0") #
cov_result <- easyrd(dt, cov_params)
cutoff_results <- easyrd(dt, params, alt_type = "cutoff", values = c(-0.1, 0.1))
# Sensitivity to Observations near the Cutoff (donut)
donut_results <- easyrd(dt, params, alt_type = "donut", values = c(0.01, 0.02, 0.03))
# Sensitivity to Bandwidth Choice
bandwidth_results <- easyrd(dt, params, alt_type = "bandwidth", values = c(0.1, 0.2, 0.3))
plot(rd_result) #standard rd plot
print(rd_result) #result table
plot(cutoff_results) #estimates with alternative specifications
print(cutoff_results) #estimates with alternative specifications
plot_sources <- rd_result$plot_source #plot_sources is a data.table that can be saved as csv easily
plot_rd(plot_sources) + ggtitle("my custom title")
build()
library(remotes)
install_github("TsaiLintung/easyrd")
library(easyrd)
# Load the package
library(data.table)
library(ggplot2)
library(easyrd)
# Simulate some example data
x0 <- runif(1000, -1, 1)
x <- runif(1000, -1, 1)
x2 <- runif(1000, -1, 1)
y <- 5 + 3*x + x2 + 2*(x >= 0) + rnorm(1000)
y2 <- 5 + 3*x + x2 + 3*(x >= 0) + rnorm(1000)
dt <- data.table(x = x, x2 = x2, y = y, y2 = y2, x0 = x0)
# Set parameters for RD analysis
outcomes <- c("y", "y2")
running <- "x"
cutoff <- 0
params <- get_rd_param(outcomes, running, cutoff)
# Execute the main RD analysis
rd_result <- easyrd(dt, params)
#see the results!
rd_result
# Load the package
library(data.table)
library(ggplot2)
library(easyrd)
# Simulate some example data
n <- 10000
dt <- data.table(x = runif(n, -1, 1), x2 = runif(n, -1, 1), x0 = (n, -1, 1)
# Load the package
library(data.table)
library(ggplot2)
library(easyrd)
# Simulate some example data
n <- 10000
dt <- data.table(x = runif(n, -1, 1), x2 = runif(n, -1, 1), x0 = (n, -1, 1)
n <- 10000
dt <- data.table(x = runif(n, -1, 1), x2 = runif(n, -1, 1), x0 = (n, -1, 1),
dt <- data.table(x = runif(n, -1, 1), x2 = runif(n, -1, 1), x0 = (n, -1, 1),
- data.table(x = runif(n, -1, 1), x2 = runif(n, -1, 1), x0 = (n, -1, 1),
y2 = 5 + 3*x + x2 + 3*(x >= 0) + rnorm(n)
data.table(x = runif(n, -1, 1), x2 = runif(n, -1, 1), x0 = (n, -1, 1),
data.table(x = runif(n, -1, 1), x2 = runif(n, -1, 1), x0 = (n, -1, 1))
data.table(x = runif(n, -1, 1))
data.table(x = runif(n, -1, 1), x2 = runif(n, -1, 1))
data.table(x = runif(n, -1, 1), x2 = runif(n, -1, 1), x0 = (n, -1, 1))
# Load the package
library(data.table)
library(ggplot2)
library(easyrd)
# Simulate some example data
n <- 10000
dt <- data.table(x = runif(n, -1, 1), x2 = runif(n, -1, 1), x0 = runif(n, -1, 1),
y = 5 + 3*x + x2 + 2*(x >= 0) + rnorm(n),
y2 = 5 + 3*x + x2 + 3*(x >= 0) + rnorm(n))
# Set parameters for RD analysis
params <- get_rd_param(c("y", "y2"), "x", 0)
# Execute the main RD analysis
rd_result <- easyrd(dt, params)
rd_result #see the results!
# Predetermined Covariates and Placebo Outcomes
cov_params <- params
cov_params$outcomes <- c("x0") #
cov_result <- easyrd(dt, cov_params)
# Placebo cutoffs
cutoff_results <- easyrd(dt, params, alt_type = "cutoff", values = c(-0.1, 0.1))
# Density check is not included in easyrd but can be done easily with rddensity:
# require(rddensity)
# density_check <- rddensity(dt[,x], cutoff)
#Sensitivity checks
# Sensitivity to Observations near the Cutoff (donut)
donut_results <- easyrd(dt, params, alt_type = "donut", values = c(0.01, 0.02, 0.03))
# Sensitivity to Bandwidth Choice
bandwidth_results <- easyrd(dt, params, alt_type = "bandwidth", values = c(0.1, 0.2, 0.3))
plot(rd_result) #standard rd plot
print(rd_result) #result table
plot(cutoff_results) #estimates with alternative specifications
print(cutoff_results) #estimates with alternative specifications
plot_sources <- rd_result$plot_source #plot_sources is a data.table that can be saved as csv easily
plot_rd(plot_sources) + ggtitle("my custom title")
